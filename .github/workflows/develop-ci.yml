name: üîÑ CI/CD Pipeline

on:
  push:
    branches: [develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  XCODE_PROJECT: FinanceApp.xcworkspace
  SCHEME: FinanceApp

jobs:
  test:
    name: üß™ Run Tests & Lint
    runs-on: macos-15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Select Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2.0"

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install dependencies
        run: |
          gem install cocoapods
          pod install --repo-update

      - name: Install SwiftLint
        run: |
          brew install swiftlint

      - name: Run SwiftLint
        run: swiftlint lint --reporter github-actions-logging

      - name: Check commit message format
        uses: wagoid/commitlint-github-action@v5
        if: github.event_name == 'pull_request'
        with:
          configFile: ".commitlintrc.json"

      - name: Build for testing
        run: |
          echo "üî® Starting build for testing..."
          echo "Workspace: ${{ env.XCODE_PROJECT }}"
          echo "Scheme: ${{ env.SCHEME }}"
          echo "Destination: iPhone 16"

          # First, let's see what's available
          xcodebuild -list -workspace ${{ env.XCODE_PROJECT }}

          # Check if the scheme exists and is valid
          xcodebuild -workspace ${{ env.XCODE_PROJECT }} \
                     -scheme ${{ env.SCHEME }} \
                     -showBuildSettings | head -20

          # Now attempt the build with verbose output
          set -o pipefail
          xcodebuild -workspace ${{ env.XCODE_PROJECT }} \
                     -scheme ${{ env.SCHEME }} \
                     -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
                     clean build-for-testing \
                     -verbose | xcpretty --report html --output build-report.html
        continue-on-error: true

      - name: Run unit tests
        run: |
          echo "üß™ Running tests with full build cycle..."
          xcodebuild -workspace ${{ env.XCODE_PROJECT }} \
                     -scheme ${{ env.SCHEME }} \
                     -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
                     test \
                     -resultBundlePath TestResults.xcresult

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.event_name }}-${{ github.run_number }}
          path: TestResults.xcresult

      - name: Upload build logs if failed
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs-${{ github.event_name }}-${{ github.run_number }}
          path: |
            build-report.html
            ~/Library/Developer/Xcode/DerivedData/*/Logs/Build/*.xcactivitylog

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  semantic-version-develop:
    name: üì¶ Development Versioning
    runs-on: ubuntu-latest
    needs: test
    # Run on pushes to develop OR when manually triggered
    if: (github.ref == 'refs/heads/develop' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Semantic Release (Development)
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 22
          extra_plugins: |
            @semantic-release/changelog@6.0.0
            @semantic-release/git@10.0.0
          dry_run: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Development Release Summary
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo "üéâ New development release: v${{ steps.semantic.outputs.new_release_version }}"
          echo "üìù This version is ready for development and testing"
          echo "üöÄ When ready for production, create a PR to main branch"

      - name: Update package.json version
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          NEW_VERSION="${{ steps.semantic.outputs.new_release_version }}"
          echo "üì¶ Version updated to: $NEW_VERSION"
          echo "This version can be used for local development and testing"

  build-verification:
    name: üèóÔ∏è Build Verification
    runs-on: macos-14
    needs: [test, semantic-version-develop]
    # Run if semantic versioning job completed (regardless of whether new release was published)
    # or if we're on develop branch and tests passed
    if: always() && needs.test.result == 'success' && (needs.semantic-version-develop.result == 'success' || (github.ref == 'refs/heads/develop' && github.event_name == 'push'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Select Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2.0"

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install dependencies
        run: |
          gem install cocoapods
          pod install --repo-update

      - name: Verify release build (Simulator only)
        run: |
          echo "üî® Building release version for verification..."

          if [[ "${{ needs.semantic-version-develop.outputs.new_release_published }}" == "true" ]]; then
            echo "üì¶ Building version ${{ needs.semantic-version-develop.outputs.new_release_version }}"
            VERSION_INFO="Version ${{ needs.semantic-version-develop.outputs.new_release_version }}"
          else
            echo "üì¶ Building current develop branch (no new release)"
            VERSION_INFO="Current develop build"
          fi

          xcodebuild -workspace ${{ env.XCODE_PROJECT }} \
                     -scheme ${{ env.SCHEME }} \
                     -configuration Release \
                     -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
                     clean build
                     
          echo "‚úÖ Release build verification successful!"
          echo "üì± $VERSION_INFO is ready"
          echo "üí° This build is simulator-only (no device/archive needed for development)"
